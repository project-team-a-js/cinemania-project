{"version":3,"file":"index.js","sources":["../src/js/header.js","../src/js/footer.js","../src/js/up-coming.js"],"sourcesContent":["const menuButton = document.querySelector(\".menu-button\");\r\nconst mobileMenu = document.querySelector(\".mobile-menu\");\r\n\r\nmenuButton.addEventListener(\"click\", myFunction);\r\n\r\nfunction myFunction() {\r\n  if (mobileMenu.style.display != \"none\") {\r\n    mobileMenu.style.display = \"block\";\r\n  } else {\r\n    mobileMenu.style.display = \"none\";\r\n  }\r\n  console.log(mobileMenu.style.display);\r\n}\r\n","const modal = document.querySelector(\".modal\");\r\nconst footerLink = document.querySelector(\".footer-link\");\r\nconst footerCloseBtn = document.querySelector(\".modal-close-btn\");\r\n\r\nfunction openModal() {\r\n  modal.style.display = \"flex\";\r\n}\r\n\r\nfunction closeModal() {\r\n  modal.style.display = \"none\";\r\n}\r\n\r\nfooterLink.addEventListener(\"click\", (event) => {\r\n  event.preventDefault();\r\n  openModal();\r\n});\r\n\r\nfooterCloseBtn.addEventListener(\"click\", closeModal);\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"bca6557ef64423ebe36f13a6f80e4fa5\";\r\nconst BASE_URL = \"https://api.themoviedb.org\";\r\nconst IMAGE_BASE_URL = \"https://image.tmdb.org/t/p/\";\r\n\r\nconst upcomingMovie = document.querySelector(\".upcoming-movie\");\r\n\r\nlet genresMap = new Map(); //key: ID, value: genre name\r\n\r\nasync function fetchGenres() {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/3/genre/movie/list?api_key=${API_KEY}&language=en-EN`);\r\n\r\n    response.data.genres.forEach((genre) => {\r\n      genresMap.set(genre.id, genre.name);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching movie genres:\", error);\r\n  }\r\n}\r\n\r\nfunction getGenresNames(genreIds) {\r\n  return genreIds.map((id) => genresMap.get(id) || \"Unknown Genre\").join(\", \");\r\n}\r\n\r\nfunction getMonthDateRange() {\r\n  const today = new Date();\r\n  const year = today.getFullYear();\r\n  const month = today.getMonth();\r\n\r\n  const firstDay = new Date(year, month, 1); //ayın ilk günü\r\n  const lastDay = new Date(year, month + 1, 0); //ayın son günü(bir sonraki ayın 0.günü)\r\n\r\n  const formatedDate = (date) => {\r\n    const yyyy = date.getFullYear();\r\n    const mm = String(date.getMonth() + 1).padStart(2, \"0\"); // Ayı iki basamaklı yap\r\n    const dd = String(date.getDate()).padStart(2, \"0\"); // Günü iki basamaklı yap\r\n\r\n    return `${yyyy}-${mm}-${dd}`;\r\n  };\r\n\r\n  return {\r\n    startDate: formatedDate(firstDay),\r\n    endDate: formatedDate(lastDay),\r\n  };\r\n}\r\n\r\nfunction myLibraryButtonUpdate(button, movieID) {\r\n  if (isMovieInLibrary(movieID)) {\r\n    button.textContent = \"Remove from My Library\";\r\n  } else {\r\n    button.textContent = \"Add to My Library\";\r\n  }\r\n}\r\n\r\nfunction displayMovie(movie) {\r\n  let imageUrl, srcset, sizes, imageClass;\r\n\r\n  const windowWidth = window.innerWidth;\r\n\r\n  if (windowWidth >= 1280 && movie.backdrop_path) {\r\n    // DESKTOP için backdrop_path\r\n    imageUrl = `https://image.tmdb.org/t/p/w1280${movie.backdrop_path}`;\r\n    srcset = ` https://image.tmdb.org/t/p/w780${movie.backdrop_path} 780w,\r\n        https://image.tmdb.org/t/p/w1280${movie.backdrop_path} 1280w,\r\n        https://image.tmdb.org/t/p/original${movie.backdrop_path} 1920w\r\n        `;\r\n    sizes = `(min-width: 1280px) 805px`;\r\n    imageClass = \"movie-image-backdrop\";\r\n  } else if (windowWidth >= 768 && movie.backdrop_path) {\r\n    // TABLET için backdrop_path (768px ile 1279px arası)\r\n    imageUrl = `https://image.tmdb.org/t/p/w780${movie.backdrop_path}`;\r\n    srcset = ` https://image.tmdb.org/t/p/w300${movie.backdrop_path} 300w,\r\n        https://image.tmdb.org/t/p/w780${movie.backdrop_path} 780w\r\n        `;\r\n    sizes = `(min-width: 768px) 704px,\r\n        (max-width: 1279px) 704px`;\r\n    imageClass = \"movie-image-backdrop\";\r\n  } else {\r\n    // MOBİL için poster_path (320px ile 767px arası)\r\n    imageUrl = movie.poster_path\r\n      ? `https://image.tmdb.org/t/p/w342${movie.poster_path}`\r\n      : \"https://via.placeholder.com/320x460?text=Görsel+Yok\";\r\n    srcset = ` https: //image.tmdb.org/t/p/w185${movie.poster_path} 185w,\r\n        https://image.tmdb.org/t/p/w342${movie.poster_path} 342w,\r\n        https://image.tmdb.org/t/p/w500${movie.poster_path} 500w\r\n        `;\r\n    sizes = `(max-width: 320px) 280px,\r\n        (max-width: 767px) 280px`;\r\n    imageClass = \"movie-image-poster\";\r\n  }\r\n\r\n  const releaseDate = movie.release_date\r\n    ? new Date(movie.release_date).toLocaleDateString()\r\n    : \"Unknown Release Date\";\r\n  const voteAverage = movie.vote_average\r\n    ? movie.vote_average.toFixed(1)\r\n    : \"\";\r\n  const voteCount = movie.vote_count\r\n    ? movie.vote_count.toLocaleString()\r\n    : \"\";\r\n  const genres = getGenresNames(movie.genre_ids);\r\n\r\n  const movieTitle = movie.title.toUpperCase();\r\n\r\n    upcomingMovie.innerHTML = `\r\n    <div class=\"upcoming-movie-container\">\r\n        <img src=\"${imageUrl}\" \r\n            srcset=\"${srcset.trim()}\" \r\n            sizes=\"${sizes.trim()}\" \r\n            class=\"movieImage ${imageClass}\"\r\n            alt=\"${movie.title} Poster Görseli\"/>\r\n        <div class=\"upcoming-info\">\r\n            <p class=\"upcoming-title\">${movieTitle}</p>\r\n            <div class=\"upcoming-info-details\">\r\n                <div class=\"info-tablet-details\">\r\n                    <div class=\"info-detail\">\r\n                        <p class=\"info-p\">Release Date</p>\r\n                        <span class=\"info-span info-color\">${releaseDate}</span>\r\n                    </div>\r\n                    <div class=\"info-detail\">\r\n                        <p class=\"info-p\">Vote / Votes</p>\r\n                        <div class=\"info-votes-container\">\r\n                          <span class=\"info-span info-votes\">${voteAverage}</span>\r\n                          <p> / </p>\r\n                          <span class=\"info-span info-votes\">${voteCount}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"info-tablet-details\">\r\n                    <div class=\"info-detail\">\r\n                        <p class=\"info-p\">Popularity</p>\r\n                        <span class=\"info-span\">${movie.popularity.toFixed(2)}</span>\r\n                    </div>\r\n                    <div class=\"info-detail\">\r\n                        <p class=\"info-p\">Genres</p>\r\n                        <span class=\"info-span\">${genres}</span>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            <div class=\"upcoming-about\">\r\n                <p class=\"info-p info-about\">ABOUT</p>\r\n                <p class=\"info-p\">${movie.overview}</p>\r\n            </div>\r\n            <button class=\"addLibrary\" data-id=\"${\r\n              movie.id\r\n            }\">Add to My Library</button>\r\n        </div>\r\n    </div>`;\r\n\r\n  const addLibraryButton = upcomingMovie.querySelector(\".addLibrary\");\r\n  myLibraryButtonUpdate(addLibraryButton, movie.id);\r\n\r\n  addLibraryButton.addEventListener(\"click\", () => {\r\n    const movieID = parseInt(addLibraryButton.getAttribute(\"data-id\"));\r\n    let myLibrary = getMyLibrary();\r\n\r\n    if (isMovieInLibrary(movieID)) {\r\n      myLibrary = myLibrary.filter((id) => id !== movieID);\r\n      localStorage.setItem(\"myLibrary\", JSON.stringify(myLibrary));\r\n    } else {\r\n      setMyLibrary(movieID);\r\n    }\r\n\r\n    myLibraryButtonUpdate(addLibraryButton, movieID);\r\n  });\r\n}\r\n\r\nasync function randomUpcomingMovie() {\r\n  await fetchGenres();\r\n\r\n  const { startDate, endDate } = getMonthDateRange();\r\n\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/3/discover/movie`,\r\n      {\r\n        params: {\r\n          api_key: API_KEY,\r\n          \"primary_release_date.gte\": startDate,\r\n          \"primary_release_date.lte\": endDate,\r\n          sort_by: \"popularity.desc\",\r\n        },\r\n      }\r\n    );\r\n\r\n    const movies = response.data.results;\r\n\r\n    if (movies && movies.length > 0) {\r\n      const randomIndex = Math.floor(Math.random() * movies.length);\r\n      const randomMovie = movies[randomIndex];\r\n      displayMovie(randomMovie);\r\n    } else {\r\n      upcomingMovie.innerHTML =\r\n        \"<p>No upcoming movies found for this month.</p>\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching upcoming movies:\", error);\r\n  }\r\n}\r\n\r\n//LocalStorage veri ekleme\r\nfunction setMyLibrary(movieID) {\r\n  let myLibrary = getMyLibrary();\r\n  myLibrary = myLibrary ? myLibrary : [];\r\n\r\n  if (!myLibrary.includes(movieID)) {\r\n    myLibrary.push(movieID);\r\n    localStorage.setItem(\"myLibrary\", JSON.stringify(myLibrary));\r\n  }\r\n}\r\n\r\n//LocalStorage veriler al\r\nfunction getMyLibrary() {\r\n  const library = localStorage.getItem(\"myLibrary\");\r\n  return library ? JSON.parse(library) : [];\r\n}\r\n\r\nfunction removeFromLibrary(movieID) {\r\n  let myLibrary = getMyLibrary();\r\n  myLibrary = myLibrary.filter((id) => id !== movieID);\r\n  localStorage.setItem(\"myLibrary\", JSON.stringify(myLibrary));\r\n}\r\n\r\nfunction isMovieInLibrary(movieID) {\r\n  const myLibrary = getMyLibrary();\r\n  return myLibrary.includes(movieID);\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", randomUpcomingMovie);\r\n"],"names":["menuButton","mobileMenu","myFunction","modal","footerLink","footerCloseBtn","openModal","closeModal","event","API_KEY","BASE_URL","upcomingMovie","genresMap","fetchGenres","axios","genre","error","getGenresNames","genreIds","id","getMonthDateRange","today","year","month","firstDay","lastDay","formatedDate","date","yyyy","mm","dd","myLibraryButtonUpdate","button","movieID","isMovieInLibrary","displayMovie","movie","imageUrl","srcset","sizes","imageClass","windowWidth","releaseDate","voteAverage","voteCount","genres","movieTitle","addLibraryButton","myLibrary","getMyLibrary","setMyLibrary","randomUpcomingMovie","startDate","endDate","movies","randomIndex","randomMovie","library"],"mappings":"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"}